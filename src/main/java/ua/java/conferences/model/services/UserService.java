package ua.java.conferences.model.services;

import ua.java.conferences.dto.UserDTO;
import ua.java.conferences.exceptions.*;
import ua.java.conferences.model.entities.role.Role;

import java.util.List;

/**
 * UserService interface.
 * Implement all methods in concrete UserService
 *
 * @author Vitalii Kalinchyk
 * @version 1.0
 */
public interface UserService extends Service<UserDTO> {

    /**
     * Calls DAO to add relevant entity
     * @param userDTO - DTO to be added as entity to database
     * @param password - password to be added to entity
     * @param confirmPassword - will check if passwords match
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void add(UserDTO userDTO, String password, String confirmPassword) throws ServiceException;

    /**
     * Obtains necessary User entity and checks if password matches
     * @param email - to find user in database
     * @param password - to check if matches with user password
     * @return UserDTO - that matches User entity
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    UserDTO signIn(String email, String password) throws ServiceException;

    /**
     * Obtains necessary User entity
     * @param email - to find user in database
     * @return UserDTO - that matches User entity
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    UserDTO getByEmail(String email) throws ServiceException;

    /**
     * Calls DAO to get sorted, filtered and limited list of DTOs
     * @param query - to obtain necessary DTOs
     * @return List of UserDTOs that match demands
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    List<UserDTO> getSortedUsers(String query) throws ServiceException;

    /**
     * Calls DAO to get users that participate in the event
     * @param eventId - id as a String to validate and convert to long
     * @param role - should be either VISITOR or SPEAKER
     * @return List of UserDTOs that match demands
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    List<UserDTO> getParticipants(String eventId, Role role) throws ServiceException;

    /**
     * Calls DAO to get number of all records that match filter
     * @param filter - conditions for such Users
     * @return number of records that match demands
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    int getNumberOfRecords(String filter) throws ServiceException;

    /**
     * Calls DAO to get all speakers
     * @return list of UserDTOs with role = SPEAKER
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    List<UserDTO> getSpeakers() throws ServiceException;

    /**
     * Calls DAO to get all speakers
     * @return list of UserDTOs with role = MODERATOR
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    List<UserDTO> getModerators() throws ServiceException;

    /**
     * Calls DAO to update User with new password
     * @param userId id to find user by
     * @param password - old password
     * @param newPass - new password
     * @param confirmPass - should match new password
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void changePassword(long userId, String password, String newPass, String confirmPass) throws ServiceException;

    /**
     * Calls DAO to update User with new password if user forget old one.
     * @param userId id to find user by
     * @return new password for user, generated by method
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    String changePassword(long userId) throws ServiceException;

    /**
     * Calls DAO to set new user role
     * @param email - to find user by email
     * @param roleId new role for user
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void setRole(String email, int roleId) throws ServiceException;

    /**
     * Calls DAO to register user for event
     * @param userId - can be long cause be gotten from session
     * @param eventIdString - id as a String to validate and convert to long
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void registerForEvent(long userId, String eventIdString) throws ServiceException;

    /**
     * Calls DAO to cancel users registration for event
     * @param userId - can be long cause be gotten from session
     * @param eventIdString - id as a String to validate and convert to long
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void cancelRegistration(long userId, String eventIdString) throws ServiceException;


    /**
     * Calls DAO to check if user registered for event
     * @param userId - can be long cause be gotten from session
     * @param eventIdString - id as a String to validate and convert to long
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     * @return true if user registered for event
     */
    boolean isRegistered(long userId, String eventIdString) throws ServiceException;
}